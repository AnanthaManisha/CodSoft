# -*- coding: utf-8 -*-
"""CodSoft_Task_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WInNIgpk2lj8d7yodM4LqxX-XMKdlN95

IMPORTING THE LIBRARIES
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix

"""IMPORTING THE DATASET"""

d = pd.read_csv("/content/drive/MyDrive/archive/tested.csv")

d.head()

d.shape

d.info()

d.describe()

"""PRE-PROCESSING DATASET"""

d.isnull().sum()

d = d.drop(columns='Cabin', axis=1)

d.isnull().sum()

d = d.drop(columns='Fare', axis=1)

d.isnull().sum()

d['Age'].fillna(d['Age'].mean(), inplace=True)

d.isnull().sum()

d.drop(['PassengerId', 'Name', 'Ticket'], axis=1, inplace=True)

d.isnull().sum()

"""DATA VISUALIZATION"""

d['Survived'].value_counts()

sns.countplot(x = 'Survived',data = d)

d['Sex'].value_counts()

sns.countplot(x = 'Sex',data = d)

sns.heatmap(d.corr(),annot=True)
plt.show()

sns.countplot(x = 'Sex', hue='Survived', data=d)

d['Pclass'].value_counts()

sns.countplot(x = 'Pclass', hue='Survived', data=d)

"""TRAIN TEST SPLIT"""

y_data = d.Survived

x_data = d.drop(['Survived'], axis = 1)

x_data.head()

x_data.Age = x_data.Age.replace({'Child': 0,'Young Adult':1, 'Middle-Aged': 2, 'Senior': 3})

x_data.Embarked = x_data.Embarked.replace({'C': 0, 'Q': 1, 'S':2})

x_data.Sex = x_data.Sex.replace({'female': 0, 'male': 1})

x_data.head()

x_train, x_test, y_train, y_test = train_test_split(x_data, y_data, test_size=0.4, random_state=42)

"""BUILDING THE MODEL"""

from sklearn.neighbors import KNeighborsClassifier
model = KNeighborsClassifier()

model.fit(x_train, y_train)

"""PREDICTING THE MODEL"""

y_pred = model.predict(x_test)
print("Accuracy score :",accuracy_score(y_test, y_pred))

x_train_prediction = model.predict(x_train)

print(x_train_prediction)

"""EVALUATING THE MODEL"""

training_data_accuracy = accuracy_score(y_train, x_train_prediction)

print("Accuracy score of training data: ",training_data_accuracy)

x_test_prediction = model.predict(x_test)

print(x_test_prediction)

test_data_accuracy = accuracy_score(y_test, x_test_prediction)

print("Accuracy score of test data: ",test_data_accuracy)

"""CONFUSION MATRIX HEATMAP"""

c_matrix = confusion_matrix(y_test, y_pred)
c_matrix

plt.figure(figsize=(8, 6))
sns.heatmap(c_matrix, annot=True, fmt="d", cmap="Blues")
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix Heatmap')
plt.show()